# Custom zsh prompt
# Drew Herron - Jan 2025

# Load version control info
autoload -Uz vcs_info
autoload -Uz add-zsh-hook

# Configure vcs_info for git
zstyle ':vcs_info:git:*' formats '[%b]'
zstyle ':vcs_info:*' enable git

# Define a color_map for hex colors
typeset -A color_map
color_map=(
  MAGENTA   '#ff55ff'
  AMBER     '#ffb700'
  CYAN      '#55ffff'
  GREEN     '#4aff00'
  BLACK     '#000000'
)

# Associate host names to color names
typeset -A host_bg_color
host_bg_color=(
  Ada       MAGENTA
  Babbage   CYAN
)
# Default host color
DEFAULT_COLOR_NAME=AMBER

# Set up main color array 'pc'
typeset -A pc
pc=(
  # Initialize host to default; override it at runtime.
  host  "%K{${color_map[$DEFAULT_COLOR_NAME]}}%F{${color_map[BLACK]}}"
  git   '%F{#55ffff}'
  std   '%F{#4aff00}'
  reset '%f%k'
)

# Git status indicators
GIT_MODIFIED='!'
GIT_UNTRACKED='?'
GIT_AHEAD='*'
GIT_NEWFILE='+'
GIT_RENAMED='>'
GIT_DELETED='x'

# Get git status
parse_git_dirty() {
  local git_status="$(git status --porcelain 2>/dev/null)"
  local bits=''

  # If something has been modified (M), even if staged, show '!'
  [[ $(echo "$git_status" | grep '^[ MARC]M') ]] && bits+="$GIT_MODIFIED"
  # Untracked files
  [[ $(echo "$git_status" | grep '^??') ]] && bits+="$GIT_UNTRACKED"
  # Branch is ahead
  [[ $(git status 2>/dev/null | grep 'ahead') ]] && bits+="$GIT_AHEAD"
  # New files
  [[ $(echo "$git_status" | grep '^A') ]] && bits+="$GIT_NEWFILE"
  # Renamed files
  [[ $(echo "$git_status" | grep '^R') ]] && bits+="$GIT_RENAMED"
  # Deleted files
  [[ $(echo "$git_status" | grep '^D') ]] && bits+="$GIT_DELETED"

  # If bits is non-empty, prepend a space
  [[ -n "$bits" ]] && echo " $bits"
}

parse_git_branch() {
  local branch="$(git branch --show-current 2>/dev/null)"
  [[ -n "$branch" ]] && echo "[${branch}$(parse_git_dirty)]"
}

prompt_precmd() {
  # If we still want vcs_info, uncomment
  #vcs_info

  # Host color logic
  local current_host="$HOST"
  local c_name="${host_bg_color[$current_host]:-$DEFAULT_COLOR_NAME}"
  local c_hex="${color_map[$c_name]:-#ffb700}"
  pc[host]="%K{$c_hex}%F{#000000}"

  # Build custom Git status
  #    If not in a git repo, parse_git_branch returns empty.
  pc[git_status]=$(parse_git_branch)
}

# Hook this function to run before each prompt
add-zsh-hook precmd prompt_precmd

# Turn on prompt substitution
setopt PROMPT_SUBST

# Create the final prompt
PROMPT='${pc[host]} %m ${pc[reset]} ${pc[std]}%~${pc[reset]} \
${pc[git]}${pc[git_status]}${pc[reset]}
${pc[std]} %n \$${pc[reset]} '