# interpreter for shell commands
set shell sh

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10

set filesep "\n"      # default already
set icons on          # show icons next to files
set period 1          # interval to check for directory updates
set hidden on         # show hidden files by default
set incsearch on      # jump to first match after each keystroke in search
set ignorecase on
set dircounts on      # show number of items in directory instead of sie
set info "size"       # list directory information on the right
set sortby "natural"  # don't sort files in any special way
set preview on        # preview file on the right pane
#set drawbox on        # draw a border around all panes
#set ratios '1:2:3'    # ratio of pane widths
#set hiddenfiles ".*:*.aux:*.log:*.bbl:*.bcf:*.blg:*.run.xml"

# use enter for shell commands
map <enter> shell

# Image preview
set previewer ~/.config/lf/preview
set cleaner ~/.config/lf/cleaner

# execute current file (must be executable)
map x $$f
map X !$f

# dedicated keys for file opener actions
map o &mimeopen $f
map O $mimeopen --ask $f

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
# --------------------------------

cmd open ${{
    # Resolve symlinks to real paths before checking MIME type
    if [ -L "$f" ]; then
        f="$(readlink -f "$f")"
    fi
    
    # Determine the MIME type (just once)
    mime="$(file --mime-type --brief "$f")"

    case "$mime" in

        # ======================
        #  Office/Spreadsheet
        # ======================
        # Example: .xlsx => localc, or unify with LibreOffice if you prefer:
        application/vnd.openxmlformats-officedocument.spreadsheetml.sheet|\
        application/vnd.ms-excel|\
        application/vnd.oasis.opendocument.spreadsheet)
            setsid -f localc $fx >/dev/null 2>&1
            ;;

        # ======================
        #  PDF, DjVu, PostScript
        # ======================
        # (Includes application/octet-stream if you prefer Zathura as a fallback)
        application/pdf|\
        application/vnd.djvu|\
        application/postscript|\
        application/octet-stream)
            setsid -f zathura $fx >/dev/null 2>&1
            ;;

        # ======================
        #  E-Books
        # ======================
        # e.g. .epub
        application/epub|\
        application/epub+zip)
            setsid -f zathura $fx >/dev/null 2>&1
            ;;

        # ======================
        #  Word Processing
        # ======================
        application/vnd.openxmlformats-officedocument.wordprocessingml.document|\
        application/msword|\
        application/vnd.oasis.opendocument.text|\
        application/rtf)
            setsid -f libreoffice $fx >/dev/null 2>&1
            ;;

        # ======================
        #  Presentations
        # ======================
        # .ppt, .pptx, .odp, etc.
        application/vnd.openxmlformats-officedocument.presentationml.presentation|\
        application/vnd.ms-powerpoint|\
        application/vnd.oasis.opendocument.presentation|\
        application/vnd.oasis.opendocument.presentation-template)
            setsid -f libreoffice $fx >/dev/null 2>&1
            ;;

        # ======================
        #  Other Office Docs
        # ======================
        # (e.g. .odg, .fodg, .odb, etc.)
        application/vnd.oasis.opendocument.graphics|\
        application/vnd.oasis.opendocument.graphics-template|\
        application/vnd.oasis.opendocument.formula|\
        application/vnd.oasis.opendocument.database)
            setsid -f libreoffice $fx >/dev/null 2>&1
            ;;

        # ======================
        #  Plain Text & Friends
        # ======================
        # e.g. .txt, .json, .srt, etc.
        text/*|application/json|inode/x-empty|application/x-subrip)
            $EDITOR -nw $fx
            ;;

        # ======================
        #  Images
        # ======================
        # XCF => GIMP
        image/x-xcf)
            setsid -f gimp "$f" >/dev/null 2>&1
            ;;

        # SVG => ImageMagick's display
        image/svg+xml)
            display -- "$f"
            ;;

        # All other images => piew
        image/*)
            setsid -f piew "$f" >/dev/null 2>&1
            # 
            # (Alternate gallery approach using sxiv/nsxiv):
            #   find . -type f \( -iname '*.png' -o -iname '*.jpg' ... \) \
            #        -exec setsid -f nsxiv -aio {} + 
            ;;
        
        # ======================
        #  Audio
        # ======================
        # Example: show metadata in terminal, then play with mpv
        audio/*)
            clear
            exiftool "$f"
            mpv "$f" >/dev/null
            ;;
        
        # ======================
        #  Video
        # ======================
        video/*)
            setsid -f mpv "$f" -quiet >/dev/null 2>&1
            ;;

        # ======================
        #  PGP
        # ======================
        application/pgp-encrypted)
            $EDITOR -nw $fx
            ;;

        # ======================
        #  Fallback
        # ======================
        # If nothing else matches, use your default $OPENER 
        *)
            for f in $fx; do
                setsid -f "$OPENER" "$f" >/dev/null 2>&1
            done
            ;;
    esac
}}

    
# define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
# map r push :rename<space>

# make sure trash folder exists
# %mkdir -p ~/.trash

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
#cmd trash %set -f; mv $fx ~/.trash

# define a custom 'delete' command
# cmd delete ${{
#     set -f
#     printf "$fx\n"
#     printf "delete?[y/n]"
#     read ans
#     [ "$ans" = "y" ] && rm -rf $fx
# }}

# Send to trash after confirmation
#cmd trash ${{
#    set -f
#    printf "$fx\n"
#    printf "Delete? [y/n]"
#    read ans
#    [ "$ans" = "y" ] && trash-put $fx
#}}

# Send to trash, no confirmation
cmd trash ${{
    set -f
    trash-put $fx
}}

#  use '<delete>' key for either 'trash' or 'delete' command
 map <delete> trash
# map <delete> delete

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    printf "Archive name (without .tar.gz): "
    read archivename
    [ -z "$archivename" ] && exit 1

    tar czf "${archivename}.tar.gz" $fx

    echo "Created '${archivename}.tar.gz'"
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    printf "Archive name (without .zip): "
    read archivename
    [ -z "$archivename" ] && exit 1

    zip -r "${archivename}.zip" $fx

    echo "Created '${archivename}.zip'"
}}

cmd extract-here ${{
    set -f
    # Loop over all selected items in $fx
    for file in $fx; do
        if [ -f "$file" ]; then
            case "$file" in
                *.tar.bz2) tar xjf "$file" ;;
                *.tar.gz)  tar xzf "$file" ;;
                *.bz2)     bunzip2 "$file" ;;
                *.rar)     unrar x "$file" ;;
                *.gz)      gunzip "$file"  ;;
                *.tar)     tar xf "$file"  ;;
                *.tbz2)    tar xjf "$file" ;;
                *.tgz)     tar xzf "$file" ;;
                *.zip)     unzip "$file"   ;;
                *.Z)       uncompress "$file" ;;
                *.7z)      7z x "$file"    ;;
                *) echo "'$file' cannot be extracted by this command" ;;
            esac
        else
            echo "'$file' is not a valid file"
        fi
    done
}}

# Play in mpv
cmd mpv-play ${{
    set -f
    mpv $f
}}

# Shuffle in mpv
cmd mpv-shuffle ${{
    set -f
    mpv --shuffle $f
}}

# Bulk rename
cmd bulk-rename ${{
    old=$(mktemp)
    new=$(mktemp)
    [ -n $fs ] && fs=$(ls)
    printf "$fs\n" > $old
    printf "$fs\n" > $new
    $EDITOR $new
    [ $(cat $new | wc -l) -ne $(cat $old | wc -l) ] && exit
    paste $old $new | while read names; do
        src=$(printf $names | cut -f1)
        dst=$(printf $names | cut -f2)
        [ $src = $dst ] && continue
        [ -e $dst ] && continue
        mv $src $dst
    done
    rm $old $new
    lf -remote "send $id unselect"
}}

cmd newfold ${{
    set -f
    printf "Directory name: "
    read newd
    mkdir -- "$newd"
    mv -- $fx "$newd"
}}

# Symlink selected files to location
cmd symlink-selected ${{
    set -f
    # For each selected file in $fx, create a symlink in the current directory.
    for file in $fx; do
        ln -s "$file" .
    done
    # No prompt, no questions asked.
}}

# Keybindings
map <a-p> mpv-play
map <a-s> mpv-shuffle
map <a-r> bulk-rename
map <a-d> newfold
# Colemak vim movement
map <a-m> updir
map <a-n> down
map <a-e> up
map <a-i> open
